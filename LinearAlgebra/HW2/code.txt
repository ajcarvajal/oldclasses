disp("*******************")
disp("****Question 46****")
disp("*******************")

clear
equalCount = 0;
for(i = 1:4)
    printf("Creating a 4x4 random matrix A and B. \n")

    A = rand(4);
    B = rand(4);
    x = det(A*B);
    y = det(A) * det(B);

    %round to 5 decimal places for comparison
    temp = mat2str(x,5);
    x = eval(temp);
    temp = mat2str(y,5);
    y = eval(temp);

    printf("det(AB) = %d \n", x)
    printf("det(A) * det(B) = %d \n", y)
    if(x == y)
        printf("%d == %d \n \n", x, y)
        equalCount++;
    endif
    if(equalCount == 4)
        printf("All statements were equivalent. Property det(AB) == det(A)det(B) holds true. \n \n")
        endif
endfor

disp("*******************")
disp("****Question 47****")
disp("*******************")
clear
for(i = 4:6)
    printf("Creating a random %dx%d matrix \n", i,i)

    A = rand(i);
    x = det(A);
    y = det(pinv(A));

    %round to 5 decimal places for comparison
    temp = mat2str(x,5);
    x = eval(temp);
    temp = mat2str(y,5);
    y = eval(temp);

    printf("det(A) = %d \n", x)
    printf("det(A^-1) = %d \n", y)
    printf("1 / det(A) = %d \n\n", 1/x)

    if(x == 0)
        rref(A)
        endif
endfor

printf("det(A^-1) == 1 / det(A) \n\n")

disp("*******************")
disp("****Question 48****")
disp("*******************")
clear
count = 0;
i = 4;
while(i < 6)
    printf("Creating a random %dx%d matrix \n", i,i + 1)

    A = rand(i, i+1);
    x = det(A'*A);
    y = det(A*A');

    %round to 5 decimal places for comparison
    temp = mat2str(x,5);
    x = eval(temp);
    temp = mat2str(y,5);
    y = eval(temp);

    printf("det(A'A) = %d \n", x)
    printf("det(AA') = %d \n\n" , y)

    count++;
    if(count > 2)
        i++;
        count = 0;
    endif
end

printf("The property of det(A'*A) == det(A*A') doesn't apply when A isn't a square matrix \n\n")

disp("*******************")
disp("****Question 49****")
disp("*******************")
clear
A = rand(4)

adjA = det(A) * inv(A)

B = adjA / det(A)

printf("B - inv(A) = \n")
B - inv(A)

disp("*******************")
disp("****Question 50****")
disp("*******************")
clear
%Test Cramer’s rule for a random 4 × 4 matrix A and a random 4 × 1 vector b. Compute each entry in
%the soution of Ax = b, and compare these entries with the entries of A−1b. Write the commands for
%your program that uses Cramer’s rule to prduce the second entry of x.

A = rand(4)
b = rand(4,1)
x = zeros(4,1);

printf("Computing Ax = b using Cramer's rule \n\n")

for(i = 1:4)
    temp = A;
    printf("Replacing row %d with vector b \n", i)
    temp(:,i) = b
    printf("Adding determinate to our answer vector \n")
    x(i,1) = det(temp)
endfor

printf("Solution for Ax = b using Cramer's rule: \n")
x * (1/det(A))

printf("Solution for Ax = b using A^-1 * b = \n")
pinv(A) * b


disp("*******************")
disp("****Question 51****")
disp("*******************")

clear
v = [8 -4 -7; -4 3 6; -3 -2 -5; 9 -8 -18];
w = [9; -4; -4; 7];
printf("row reduced form of augmented matrix v1,v2,v3,w")
x = rref([v,w])

printf("W is in the subspace of v1,v2,v3 because we can express it using \n")
x(:,end)


disp("*******************")
disp("****Question 52****")
disp("*******************")
clear
A = [3 -5 -9; 8 7 -6; -5 -8 3; 2 -2 -9];
y = [-4; -8; 6; -5];
printf("row reduced form of augmented matrix A,y \n")
x = rref([A,y])

printf("y is in the subspace of col A because we can express it using \n")
x(:,end)


disp("*******************")
disp("****Question 53****")
disp("*******************")
clear
A = [-8 5 -2 0; -5 2 1 -2; 10 -8 6 -3; 3 -2 1 0];
w = [1; 2; 1; 0];
printf("finding solutions for Ax = 0 \n")
[A,zeros(4,1)]
x = rref([A,zeros(4,1)])
null(A)


disp("*******************")
disp("****Question 54****")
disp("*******************")
clear
A = [-3 3 0 6 -6; 2 0 2 -2 3; 6 -9 -4 -14 0; 0 0 0 0 -1; -7 6 -1 13 0]

printf("Reducing A to find pivot points\n")

rref(A)

printf("Row 4 doesn't have a pivot point, so the basis is A without row 4\n")

A(:,4) = []



disp("*******************")
disp("****Question 55****")
disp("*******************")
clear
H = [1 0 3; 2 2 4; 0 -1 1; -1 1 -4]
K = [-2 2 -1; -2 3 4; -1 2 6; 3 -6 -2]

spanH = rref(H)
spanH(:,3) = []

spanK= rref(K)
spanK = K

spanHK = rref(H+K)
spanHK = H+K



disp("*******************")
disp("****Question 56****")
disp("*******************")

clear
for t = 1:7
A(t,:) = [1 cos(t) (cos(t))^2 (cos(t))^3 (cos(t))^4 (cos(t))^5 (cos(t))^6]
end

%rref(A)

printf("A is linearly independent because it reduces to n pivot points \n")



disp("*******************")
disp("****Question 57****")
disp("*******************")
clear
B = [-6 8 -9; 4 -3 5; -9 7 -8; 4 -3 3]
x = [4; 7; -8; 3]

printf("Is B a basis for span v1,v2,v3?\n")
rref(B)
printf("system is linearly independent, so yes\n")

printf("B-coordinate vector of x: \n")
rref([B,x])
printf("row reduce\n")
ans(:,end)



disp("*******************")
disp("****Question 58****")
disp("*******************")

clear
for t = 1:7
B(t,:) = [1 cos(t) (cos(t))^2 (cos(t))^3 (cos(t))^4 (cos(t))^5 (cos(t))^6]
C(t,:) = [1 cos(t) cos(2*t) cos(3*t) cos(4*t) cos(5*t) cos(6*t)]

end

rref(B)
rref(C)

printf("C is a basis of H because it is linearly independent and spans the set\n")



disp("*******************")
disp("****Question 59****")
disp("*******************")
clear
A = [7 -9 -4 5 3 -3 -7; -4 6 7 -2 -6 -5 5; 5 -7 -6 5 -6 2 8; -3 5 8 -1 -7 -4 8; 6 -8 -5 4 4 9 3]

printf("Part A. \n")
rref(A)
C = A;
C(:,3) = [];
C(:,4) = [];
C(:,5) = [];
C

N = null(sym(A))

printf("Part B. \n")
printf("Bottom row of reduced matrix A is zero, so row(A) is all except the last row\n")
R = A;
R(end,:) = []

printf("Part C. \n")

M = null(sym(A'))

printf("Part D. \n")
S = [R', N]
T = [C, M]

printf("Part E. \n")
printf("S and T are square because R' = C, and C + N = columns\n")

printf("Part F. \n")
detS = det(S)
detT = det(T)
printf("S and T are invertible because their determinate is non-zero\n")